worker_processes auto;
worker_rlimit_nofile 65535;
pid /usr/local/openresty/nginx/logs/nginx.pid;
error_log /usr/local/openresty/nginx/logs/error.log warn;

events {
    worker_connections 4096;
    multi_accept on;
    use epoll;
}

http {
    # default docker resolver
    resolver 127.0.0.11 valid=30s;

    server_tokens off;
    keepalive_timeout 65;
    reset_timedout_connection on;
    
    open_file_cache max=1000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    log_format detailed '$remote_addr - $remote_user [$time_local] '
                        '"$request" $status $body_bytes_sent '
                        '"$http_referer" "$http_user_agent" '
                        '$request_time $upstream_response_time';
    
    lua_shared_dict request_cache 16m;
    
    lua_package_path '/usr/local/openresty/lualib/?.lua;/usr/local/openresty/site/lualib/?.lua;;';
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Content-Type-Options nosniff;

    init_by_lua_block {
        local function validate_env(var_name, min_length)
            local value = os.getenv(var_name)
            if not value or (min_length and #value < min_length) then
                ngx.log(ngx.ERR, string.format("Invalid environment variable: %s", var_name))
                return nil
            end
            return value
        end

        -- Global module loading
        _G.cjson = require "cjson"
        _G.jwt = require "resty.jwt"
        _G.http = require "resty.http"

        -- Validate and set global configuration
        _G.jwt_secret = validate_env("JWT_SECRET", 32)
        _G.max_runner_lifetime = validate_env("MAX_RUNNER_LIFETIME")
        _G.openvsx_url = validate_env("OPENVSX_URL")
        _G.openvsx_domain = validate_env("OPENVSX_DOMAIN")

        -- Prevent startup if critical variables are missing
        if not (_G.jwt_secret and _G.max_runner_lifetime) then
            error("Critical configuration missing. Cannot start server.")
        end

        -- Function to get the real client IP considering X-Forwarded-For
        _G.get_client_ip = function()
            local headers = ngx.req.get_headers()
            local x_forwarded_for = headers["X-Forwarded-For"]
            
            if x_forwarded_for then
                -- X-Forwarded-For can contain multiple IPs, we need the first one (client)
                local first_ip = string.match(x_forwarded_for, "^([^,]+)")
                if first_ip then
                    return first_ip
                end
            end
            
            -- Fallback to remote_addr if X-Forwarded-For is not available
            return ngx.var.remote_addr
        end

        -- Function to return a 403 forbidden response
        _G.send_forbidden = function()
            ngx.status = ngx.HTTP_FORBIDDEN
            ngx.header.content_type = "application/json"
            ngx.say(cjson.encode({
                error = "Forbidden"
            }))
            ngx.exit(ngx.HTTP_FORBIDDEN)
            return false
        end
    }

    # WebSocket upgrade handling
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    server {
        listen 80;
        listen 443 ssl;

        # SSL Certificate Paths
        ssl_certificate /.certs/99122c46fa7e10bc.crt;
        ssl_certificate_key /.certs/revature.key;
        ssl_stapling off;

        # Optional but recommended SSL settings
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH;
        ssl_ecdh_curve secp384r1;
        ssl_session_timeout  10m;
        ssl_session_cache shared:SSL:10m;
        ssl_session_tickets off;

        # Additional security headers
        add_header Strict-Transport-Security "max-age=63072000; includeSubdomains";
        add_header X-Content-Type-Options nosniff;
        
        error_page 403 /403.json;
        location = /403.json {
            return 403 '{"error": "Forbidden", "message": "Access denied"}';
            default_type application/json;
        }

        # Runner location with JWT validation
        location ~ ^/dest/(?<jwt_val>[A-Za-z0-9._-]+)(/.*)?$ {
            set $target_ip "";
            # Access control
            access_by_lua_block {
                local jwt_val = ngx.var.jwt_val
                local cached_jwt_ip = ngx.shared.request_cache:get(jwt_val)
                local client_ip = get_client_ip()
                -- Check for cache hit on ip.
                if cached_jwt_ip then
                    -- Check for IP mismatch case if user_ip is specified
                    local cached_jwt_user_ip = ngx.shared.request_cache:get(jwt_val.."ip")
                    if cached_jwt_user_ip and client_ip ~= cached_jwt_user_ip then
                        ngx.log(ngx.WARN, "Unauthorized Access from IP (cached): " .. tostring(user_ip) .. 
                                    " but got " .. client_ip)                        
                        send_forbidden()
                        return false
                    end
                    ngx.var.target_ip = cached_jwt_ip
                    return true
                else
                    -- On a cache miss, decrypt the jwt.
                    local jwt_obj = jwt:verify(jwt_secret, jwt_val)
                    if jwt_obj.verified then
                        ngx.log(ngx.INFO, "JWT verified for runner: " .. (jwt_obj.payload.runner_id or "unknown"))
                        -- Check for IP mismatch (URL interception)
                        local user_ip = jwt_obj.payload.user_ip
                        if user_ip and user_ip ~= cjson.null and user_ip ~= client_ip then
                            ngx.log(ngx.WARN, "Unauthorized Access from IP (uncached): " .. tostring(user_ip) .. 
                                    " but got " .. client_ip)
                            send_forbidden()
                            return false
                        end
                        
                        -- Set target IP and cache it for next time
                        ngx.var.target_ip = jwt_obj.payload.runner_ip
                        ngx.shared.request_cache:set(jwt_val, jwt_obj.payload.runner_ip, ngx.var.max_runner_lifetime)
                        ngx.shared.request_cache:set(jwt_val.."ip", jwt_obj.payload.user_ip, ngx.var.max_runner_lifetime)
                        -- Notify backend on user connect
                        local payload = cjson.encode({
                            runner_id = jwt_obj.payload.runner_id,
                            state = "active"
                        })
                        
                        local httpc = http.new()
                        local res, err = httpc:request_uri("http://backend:8000/v1/theia_requests/update_state", {
                            method = "POST",
                            body = payload,
                            headers = {
                                ["Content-Type"] = "application/json",
                            }
                        })
                        
                        return true
                    else
                        ngx.log(ngx.WARN, "JWT verification failed: " .. (jwt_obj.reason or "Unknown reason"))
                        send_forbidden()
                        return false
                    end
                end
                return true
            }

            # Proxy configuration
            rewrite ^/dest/[^/]+(/.*)?$ $1 break;
            proxy_pass http://$target_ip:3000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_hide_header X-Frame-Options;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # API proxy location
        location ~ ^/api/(.*)$ {

            proxy_pass http://backend:8000/$1;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # OpenVSX proxy location
        location ~ ^/open-vsx/(.*)$ {
            set_by_lua_block $openvsx_url {
                return openvsx_url
            }
            set_by_lua_block $openvsx_domain {
                return openvsx_domain
            }

            proxy_pass https://$openvsx_url/$1;
            proxy_http_version 1.1;
            proxy_set_header Host $openvsx_domain;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

    }
}